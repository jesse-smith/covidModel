% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/assert_that.R
\name{assert}
\alias{assert}
\title{Flexible Error Assertion with \code{assert_that()} and \code{abort()}}
\usage{
assert(
  ...,
  message = NULL,
  class = NULL,
  data = NULL,
  trace = NULL,
  parent = NULL
)
}
\arguments{
\item{...}{unnamed expressions that describe the conditions to be tested.
Rather than combining expressions with \code{&&}, separate them by commas
so that better error messages can be generated.}

\item{message}{The message to display. Character vectors are
formatted with \code{\link[rlang:format_error_bullets]{format_error_bullets()}}. The first element
defines a message header and the rest of the vector defines
bullets. Bullets named \code{i} and \code{x} define info and error bullets
respectively, with special Unicode and colour formatting applied
if possible.

If a message is not supplied, it is expected that the message is
generated lazily through \link[rlang:cnd_message]{conditionMessage()}. In
that case, \code{class} must be supplied. Only \code{inform()} allows empty
messages as it is occasionally useful to build user output
incrementally.}

\item{class}{Subclass of the condition. This allows your users
to selectively handle the conditions signalled by your functions.}

\item{data}{Additional data to be stored in the condition object}

\item{trace}{A \code{trace} object created by \code{\link[rlang:trace_back]{trace_back()}}.}

\item{parent}{A parent condition object created by \code{\link[rlang:abort]{abort()}}.}
}
\value{
\code{TRUE} if the assertions evaluate to \code{TRUE}, otherwise an error
condition
}
\description{
This is an extension of \code{\link[assertthat:assert_that]{assert_that()}}
that allows rlang-like error specification.
}
\keyword{internal}
